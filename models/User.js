
// рждрзЛ ржПржЗржЧрзБрж▓рж╛ ржЖржорж░рж╛ ржзрж╛ржк рзз ржП ржХрж░ржЫрж┐рж▓рж╛ржо  ржжрзЗржЦрж╛рж░ ржЬржирзНржп ржпрзЗ ржХрж╛ржЬ ржХрж░рзЗ ржХрж┐ржирж╛
// ржПржЦржи ржмрзНржпрж╛ржкрж╛рж░ рж╣ржЗржЫрзЗ, ржЖржЧрзЗ ржПржЗ ржЧрзБрж▓рж╛ ржХрж░рждрзЗ рж╣рзЯ , ржкрж░рзЗ ржЖржмрж╛рж░ ржХрж╛ржЯрждрзЗ рж╣рзЯред
//ржкрзНрж░ржержорзЗ ржкрзНрж░рзЯрзЛржЬржи рждрж╛ржЗ ржХрж░рждрзЗ рж╣рзЯ рждрж╛рж░ржкрж░ ржкрзНрж░рзЯрзЛржЬржи рж╢рзЗрж╖ рждрж╛ржЗ ржХрж╛ржЗржЯрж╛ ржлрж╛рж▓рж╛рзЯрж╛ ржжрж┐рждрзЗ рж╣рзЯ
// ржХрж╛ржЗржЯрж╛ ржжрж┐рждрж╛ржЫрж┐ рж╕ржм ржЧрзБрж▓рж╛рж░рзЗ
// 1 er 2


// // mongoose ржоржбрж┐ржЙрж▓ ржЗржоржкрзЛрж░рзНржЯ ржХрж░рждрзЗржЫрж┐
// const mongoose = require("mongoose");

// // ржЗржЙржЬрж╛рж░рзЗрж░ рж╕рзНржХрж┐ржорж╛ рждрзИрж░рж┐
// const userSchema = new mongoose.Schema(
//   {
//     name: {
//       type: String, // ЁЯСЙ ржирж╛ржо рж╣ржмрзЗ рж╕рзНржЯрзНрж░рж┐ржВ
//       required: [true, "ржирж╛ржо ржжрзЗржУрзЯрж╛ ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ"], // ЁЯСЙ validation ржорзЗрж╕рзЗржЬ
//     },
//     email: {
//       type: String, // ЁЯСЙ ржЗржорзЗржЗрж▓ рж╣ржмрзЗ рж╕рзНржЯрзНрж░рж┐ржВ
//       required: [true, "ржЗржорзЗржЗрж▓ ржкрзНрж░рзЯрзЛржЬржи"],
//       unique: true, // ЁЯСЙ ржПржХржЗ ржЗржорзЗржЗрж▓ ржжрзНржмрж┐рждрзАрзЯржмрж╛рж░ ржирж╛ ржерж╛ржХрзЗ
//     },
//     password: {
//       type: String, // ЁЯСЙ ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб рж╣ржмрзЗ рж╕рзНржЯрзНрж░рж┐ржВ
//       required: [true, "ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб ржжрж┐рждрзЗ рж╣ржмрзЗ"],
//     },
//     role: {
//       type: String,
//       enum: ["user", "admin"], // ЁЯСЙ рж╢рзБржзрзБ user ржмрж╛ admin рж╣рждрзЗ ржкрж╛рж░ржмрзЗ
//       default: "user", // ЁЯСЙ ржбрж┐ржлрж▓рзНржЯ user
//     },
//   },
//   {
//     timestamps: true, // ЁЯСЙ createdAt ржУ updatedAt timestamp ржпрзЛржЧ рж╣ржмрзЗ
//   }
// );

// // ржоржбрзЗрж▓ ржПржХрзНрж╕ржкрзЛрж░рзНржЯ ржХрж░рждрзЗржЫрж┐
// const User = mongoose.model("User", userSchema);
// module.exports = User;





// ржПржЦржи ржЖрж╕рж▓ ржЯрж╛ ржХрж░рзБржо 4.2
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");

const userSchema = new mongoose.Schema(
  {
    name: { type: String, required: [true, "ржирж╛ржо ржкрзНрж░рзЯрзЛржЬржи"] },
    email: { type: String, required: [true, "ржЗржорзЗржЗрж▓ ржкрзНрж░рзЯрзЛржЬржи"], unique: true },
    password: { type: String, required: [true, "ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб ржкрзНрж░рзЯрзЛржЬржи"] },
    role: { type: String, enum: ["user", "admin"], default: "user" },
  },
  { timestamps: true }
);

// ЁЯСЙ pre-save hook ржжрж┐рзЯрзЗ ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб hash ржХрж░ржмрзЛ
userSchema.pre("save", async function (next) {
  if (!this.isModified("password")) {
    next();
  }

  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
});

// ЁЯСЙ ржЗржЙржЬрж╛рж░ ржорзЗржержб: ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб ржорзНржпрж╛ржЪ рж╣ржЪрзНржЫрзЗ ржХрж┐ржирж╛
userSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

const User = mongoose.model("User", userSchema);
module.exports = User;




